SUBGRAPH(mtrx_multiply)
    DATUM(a0);
    INPUT(a0);
    DATUM(a1);
    INPUT(a1);
    DATUM(a2);
    INPUT(a2);
    DATUM(a3);
    INPUT(a3);
    DATUM(b0);
    INPUT(b0);
    DATUM(b1);
    INPUT(b1);
    DATUM(b2);
    INPUT(b2);
    DATUM(b3);
    INPUT(b3);
    DATUM(i);
    INPUT(i);
    DATUM(j);
    INPUT(j);
    DATUM(k);
    INPUT(k);
    DATUM(c0);
    OUTPUT(c0);
    DATUM(c1);
    OUTPUT(c1);
    DATUM(c2);
    OUTPUT(c2);
    DATUM(c3);
    OUTPUT(c3);
    DATUM(cZero);
    DATUM(cOne);
    DATUM(cTwo);
    DATUM(cThree);
    DATUM(aZero);
    DATUM(aOne);
    DATUM(aTwo);
    DATUM(aThree);
    DATUM(bZero);
    DATUM(bOne);
    DATUM(bTwo);
    DATUM(bThree);
    DATUM(cElem0);
    DATUM(cElem1);
    DATUM(cElem2);
    DATUM(cElem3);
    DATUM(aElem0);
    DATUM(aElem1);
    DATUM(aElem2);
    DATUM(aElem3);
    DATUM(bElem0);
    DATUM(bElem1);
    DATUM(bElem2);
    DATUM(bElem3);
    DATUM(cElem01);
    DATUM(cElem23);
    DATUM(aElem01);
    DATUM(aElem23);
    DATUM(bElem01);
    DATUM(bElem23);
    DATUM(cFinal);
    DATUM(aFinal);
    DATUM(bFinal);
    DATUM(aTimesb);
    DATUM(abc);
    DATUM(c0_true);
    DATUM(c1_true);
    DATUM(c2_true);
    DATUM(c3_true);
    DATUM(c0_false);
    DATUM(c1_false);
    DATUM(c2_false);
    DATUM(c3_false);
    DATUM(c0_next);
    DATUM(c1_next);
    DATUM(c2_next);
    DATUM(c3_next);
    DATUM(aRowSelector);
    DATUM(bRowSelector);
    DATUM(cRowSelector);
    DATUM(bElemntSelector);
    DATUM(cElemntSelector);
    DATUM(aElemntSelector);
    DATUM(bElemntSelector);
    DATUM(cElemntSelector);
    DATUM(iGreaterThree);
    DATUM(jLessN);
    DATUM(kLessN);
    DATUM(ipp);
    DATUM(jpp);
    DATUM(kpp);
    DATUM(result1stifTrue);
    DATUM(result1stifFalse);
    DATUM(result2ndifTrue);
    DATUM(result2ndifFalse);
    DATUM(result3rdifTrue);
    DATUM(result3rdifFalse);
    CONST(zero,0);
    CONST(one,1);
    CONST(two,2);
    CONST(three,3);
    CONST(N,4);

    OPERATOR(iGreaterThree, op_ISGREATER, i, three);
    OPERATOR(result1stifTrue, op_IF, iGreaterThree, );               //if(i>=N)
    OPERATOR(result1stifFalse, op_ELSE, iGreaterThree, jLessN);
    OPERATOR(jLessN, op_ISLESS, j, N);
    OPERATOR(result2ndifTrue, op_IF, jLessN, kLessN);                      //if(j<N)

    OPERATOR(kLessN, op_ISLESS, k, N);
    OPERATOR(result3rdifTrue, op_IF, kLessN, );
    OPERATOR(cRowSelector,OP_TIMES,i,N);
    OPERATOR(cElemntSelector,op_PLUS,cRowSelector,j);
    OPERATOR(aRowSelector,OP_TIMES,i,N);
    OPERATOR(aElemntSelector,op_PLUS,aRowSelector,k);
    OPERATOR(bRowSelector,OP_TIMES,k,N);
    OPERATOR(bElemntSelector,op_PLUS,bRowSelector,j);
    OPERATOR(cZero,op_ISEQUAL,cElemntSelector,zero);
    OPERATOR(cOne,op_ISEQUAL,cElemntSelector,one);
    OPERATOR(cTwo,op_ISEQUAL,cElemntSelector,two);
    OPERATOR(cThree,op_ISEQUAL,cElemntSelector,three);
    OPERATOR(aZero,op_ISEQUAL,aElemntSelector,zero);
    OPERATOR(aOne,op_ISEQUAL,aElemntSelector,one);
    OPERATOR(aTwo,op_ISEQUAL,aElemntSelector,two);
    OPERATOR(aThree,op_ISEQUAL,aElemntSelector,three);
    OPERATOR(bZero,op_ISEQUAL,bElemntSelector,zero);
    OPERATOR(bOne,op_ISEQUAL,bElemntSelector,one);
    OPERATOR(bTwo,op_ISEQUAL,bElemntSelector,two);
    OPERATOR(bThree,op_ISEQUAL,bElemntSelector,three);
    OPERATOR(cElem0,op_IF,cZero,c0);
    OPERATOR(cElem1,op_IF,cOne,c1);
    OPERATOR(cElem2,op_IF,cTwo,c2);
    OPERATOR(cElem3,op_IF,cThree,c3);
    OPERATOR(aElem0,op_IF,aZero,a0);
    OPERATOR(aElem1,op_IF,aOne,a1);
    OPERATOR(aElem2,op_IF,aTwo,a2);
    OPERATOR(aElem3,op_IF,aThree,a3);
    OPERATOR(bElem0,op_IF,bZero,b0);
    OPERATOR(bElem1,op_IF,bOne,b1);
    OPERATOR(bElem2,op_IF,bTwo,b2);
    OPERATOR(bElem3,op_IF,bThree,b3);
    OPERATOR(cElem01,op_MERGE,cElem0,cElem1);
    OPERATOR(cElem23,op_MERGE,cElem2,cElem3);
    OPERATOR(aElem01,op_MERGE,aElem0,aElem1);
    OPERATOR(aElem23,op_MERGE,aElem2,aElem3);
    OPERATOR(bElem01,op_MERGE,bElem0,bElem1);
    OPERATOR(bElem23,op_MERGE,bElem2,bElem3);
    OPERATOR(cFinal,op_MERGE,cElem01,cElem23);
    OPERATOR(aFinal,op_MERGE,aElem01,aElem23);
    OPERATOR(bFinal,op_MERGE,bElem01,bElem23);
    OPERATOR(aTimesb,OP_TIMES,aFinal,bFinal);
    OPERATOR(abc,op_PLUS,aTimesb,cFinal);
    OPERATOR(c0_true,op_IF,cZero,abc);
    OPERATOR(c0_false,op_ELSE,cZero,c0);
    OPERATOR(c1_true,op_IF,cOne,abc);
    OPERATOR(c1_false,op_ELSE,cOne,c1);
    OPERATOR(c2_true,op_IF,cTwo,abc);
    OPERATOR(c2_false,op_ELSE,cTwo,c2);
    OPERATOR(c3_true,op_IF,cThree,abc);
    OPERATOR(c3_false,op_ELSE,cThree,c3);
    OPERATOR(c0_next,op_MERGE,c0_true,c0_false);
    OPERATOR(c1_next,op_MERGE,c1_true,c1_false);
    OPERATOR(c2_next,op_MERGE,c2_true,c2_false);
    OPERATOR(c3_next,op_MERGE,c3_true,c3_false);
    OPERATOR(kpp,op_PLUS,k,one);
    EXPAND(mtrx_multiply,MAP_IN(a0,a0); MAP_IN(a1,a1); MAP_IN(a2,a2); MAP_IN(a3,a3);
                         MAP_IN(b0,b0); MAP_IN(b1,a1); MAP_IN(b2,b2); MAP_IN(b3,b3);
                         MAP_IN(i,i); MAP_IN(j,j); MAP_IN(k,kpp);
                         MAP_OUT(c0,c0_next); MAP_OUT(c1,c0_next); MAP_OUT(c2,c0_next); MAP_OUT(c3,c0_next););

    OPERATOR(result3rdifFalse, op_ELSE, kLessN, );
    OPERATOR(jpp,op_PLUS,j,one);
    EXPAND(mtrx_multiply,MAP_IN(a0,a0); MAP_IN(a1,a1); MAP_IN(a2,a2); MAP_IN(a3,a3);
                         MAP_IN(b0,b0); MAP_IN(b1,a1); MAP_IN(b2,b2); MAP_IN(b3,b3);
                         MAP_IN(i,i); MAP_IN(j,jpp); MAP_IN(k,zero);
                         MAP_OUT(c0,c0); MAP_OUT(c1,c1); MAP_OUT(c2,c2); MAP_OUT(c3,c3););

     OPERATOR(result2ndifFalse, op_ELSE, jLessN, );
     OPERATOR(ipp,op_PLUS,i,one);
     EXPAND(mtrx_multiply,MAP_IN(a0,a0); MAP_IN(a1,a1); MAP_IN(a2,a2); MAP_IN(a3,a3);
                          MAP_IN(b0,b0); MAP_IN(b1,a1); MAP_IN(b2,b2); MAP_IN(b3,b3);
                          MAP_IN(i,ipp); MAP_IN(j,zero); MAP_IN(k,k);
                          MAP_OUT(c0,c0); MAP_OUT(c1,c1); MAP_OUT(c2,c2); MAP_OUT(c3,c3););
